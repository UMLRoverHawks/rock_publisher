/* Auto-generated by genmsg_cpp for file /home/aramus/fuerte_workspace/sandbox/rock_publisher/msg/imgDataArray.msg */
#ifndef ROCK_PUBLISHER_MESSAGE_IMGDATAARRAY_H
#define ROCK_PUBLISHER_MESSAGE_IMGDATAARRAY_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "rock_publisher/imgData.h"

namespace rock_publisher
{
template <class ContainerAllocator>
struct imgDataArray_ {
  typedef imgDataArray_<ContainerAllocator> Type;

  imgDataArray_()
  : rockData()
  {
  }

  imgDataArray_(const ContainerAllocator& _alloc)
  : rockData(_alloc)
  {
  }

  typedef std::vector< ::rock_publisher::imgData_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::rock_publisher::imgData_<ContainerAllocator> >::other >  _rockData_type;
  std::vector< ::rock_publisher::imgData_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::rock_publisher::imgData_<ContainerAllocator> >::other >  rockData;


  typedef boost::shared_ptr< ::rock_publisher::imgDataArray_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::rock_publisher::imgDataArray_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct imgDataArray
typedef  ::rock_publisher::imgDataArray_<std::allocator<void> > imgDataArray;

typedef boost::shared_ptr< ::rock_publisher::imgDataArray> imgDataArrayPtr;
typedef boost::shared_ptr< ::rock_publisher::imgDataArray const> imgDataArrayConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::rock_publisher::imgDataArray_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::rock_publisher::imgDataArray_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace rock_publisher

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::rock_publisher::imgDataArray_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::rock_publisher::imgDataArray_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::rock_publisher::imgDataArray_<ContainerAllocator> > {
  static const char* value() 
  {
    return "32f266444187840836af15d5445ea6e5";
  }

  static const char* value(const  ::rock_publisher::imgDataArray_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x32f2664441878408ULL;
  static const uint64_t static_value2 = 0x36af15d5445ea6e5ULL;
};

template<class ContainerAllocator>
struct DataType< ::rock_publisher::imgDataArray_<ContainerAllocator> > {
  static const char* value() 
  {
    return "rock_publisher/imgDataArray";
  }

  static const char* value(const  ::rock_publisher::imgDataArray_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::rock_publisher::imgDataArray_<ContainerAllocator> > {
  static const char* value() 
  {
    return "imgData[] rockData\n\
================================================================================\n\
MSG: rock_publisher/imgData\n\
int32 x\n\
int32 y\n\
int32 width\n\
int32 height\n\
string color\n\
string cameraID\n\
";
  }

  static const char* value(const  ::rock_publisher::imgDataArray_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::rock_publisher::imgDataArray_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.rockData);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct imgDataArray_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::rock_publisher::imgDataArray_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::rock_publisher::imgDataArray_<ContainerAllocator> & v) 
  {
    s << indent << "rockData[]" << std::endl;
    for (size_t i = 0; i < v.rockData.size(); ++i)
    {
      s << indent << "  rockData[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::rock_publisher::imgData_<ContainerAllocator> >::stream(s, indent + "    ", v.rockData[i]);
    }
  }
};


} // namespace message_operations
} // namespace ros

#endif // ROCK_PUBLISHER_MESSAGE_IMGDATAARRAY_H

