"""autogenerated by genpy from rock_publisher/imgData.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import rock_publisher.msg

class imgData(genpy.Message):
  _md5sum = "a35bcdd5616c102ce44b7dfda5d396a4"
  _type = "rock_publisher/imgData"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """int32 x
int32 y
int32 width
int32 height
colorRGBA color
int32 cameraID

================================================================================
MSG: rock_publisher/colorRGBA
float32 r
float32 g
float32 b
float32 a

"""
  __slots__ = ['x','y','width','height','color','cameraID']
  _slot_types = ['int32','int32','int32','int32','rock_publisher/colorRGBA','int32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       x,y,width,height,color,cameraID

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(imgData, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.x is None:
        self.x = 0
      if self.y is None:
        self.y = 0
      if self.width is None:
        self.width = 0
      if self.height is None:
        self.height = 0
      if self.color is None:
        self.color = rock_publisher.msg.colorRGBA()
      if self.cameraID is None:
        self.cameraID = 0
    else:
      self.x = 0
      self.y = 0
      self.width = 0
      self.height = 0
      self.color = rock_publisher.msg.colorRGBA()
      self.cameraID = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_4i4fi.pack(_x.x, _x.y, _x.width, _x.height, _x.color.r, _x.color.g, _x.color.b, _x.color.a, _x.cameraID))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.color is None:
        self.color = rock_publisher.msg.colorRGBA()
      end = 0
      _x = self
      start = end
      end += 36
      (_x.x, _x.y, _x.width, _x.height, _x.color.r, _x.color.g, _x.color.b, _x.color.a, _x.cameraID,) = _struct_4i4fi.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_4i4fi.pack(_x.x, _x.y, _x.width, _x.height, _x.color.r, _x.color.g, _x.color.b, _x.color.a, _x.cameraID))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.color is None:
        self.color = rock_publisher.msg.colorRGBA()
      end = 0
      _x = self
      start = end
      end += 36
      (_x.x, _x.y, _x.width, _x.height, _x.color.r, _x.color.g, _x.color.b, _x.color.a, _x.cameraID,) = _struct_4i4fi.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_4i4fi = struct.Struct("<4i4fi")
